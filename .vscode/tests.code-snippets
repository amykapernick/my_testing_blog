{
	// Linting
	"eslint-template": {
		"prefix": [
			"eslint",
			"template"
		],
		"body": [
			"module.exports = {",
		  "	extends: [ $1 ],",
		  "	plugins: [ $2 ],",
		  "	rules: { $3 }",
			"};"
		],
		"description": "eslint-template"
	},
	"eslint-extends": {
		"prefix": [
			"eslint",
			"extends"
		],
		"body": [
			"\"airbnb-base\""
		],
		"description": "eslint-extends"
	},
	"eslint-rules": {
		"prefix": [
			"eslint",
			"rules"
		],
		"body": [
			"",
		  "		'linebreak-style': 0,",
		  "		'no-tabs': 0,",
		  "		indent: ['error', 'tab', {",
		  "			\"SwitchCase\": 1,",
		  "			\"VariableDeclarator\": 1",
		  "		}],",
		  "		'arrow-spacing': ['error', { before: true, after: true }],",
		  "		'comma-dangle': [",
		  "			'error',",
		  "			{",
		  "				objects: 'only-multiline',",
		  "				arrays: 'only-multiline',",
		  "				imports: 'never',",
		  "				exports: 'never',",
		  "				functions: 'never',",
		  "			},",
		  "		],",
		  "		'no-var': 'error',",
		  "		'no-unused-vars': 1,",
		  "		'one-var': [2, 'consecutive'],",
		  "		quotes: ['error', 'backtick'],",
		  "		'no-param-reassign': [\"error\", { \"props\": false }]",
			""
		],
		"description": "eslint-rules"
	},
	"stylelint-template": {
		"prefix": [
			"stylelint",
			"template"
		],
		"body": [
			"{",
		  "	\"processors\": [ $1 ],",
		  "	\"extends\": [ $2 ],",
		  "	\"syntax\": \"$3\",",
		  "	\"rules\": { $4 }",
			"}"
		],
		"description": "stylelint-template"
	},
	"stylelint-rules": {
		"prefix": [
			"stylelint",
			"rules"
		],
		"body": [
			"",
		  "		function-calc-no-invalid: true,",
		  "		no-empty-first-line: true,",
		  "		no-missing-end-of-source-newline: true,",
		  "		no-eol-whitespace: true,",
		  "		max-empty-lines: 1,",
		  "		indentation: ['tab', {indentInsideParens: \"once-at-root-twice-in-block\"}],",
		  "		comment-empty-line-before: 'always',",
		  "		rule-empty-line-before: ['always', {except: ['first-nested']}],",
		  "		selector-attribute-quotes: 'always',",
		  "		block-opening-brace-newline-after: 'always',",
		  "		block-closing-brace-newline-before: 'always',",
		  "		block-closing-brace-empty-line-before: 'never',",
		  "		declaration-block-semicolon-newline-after: always,",
		  "		unit-case: lower,",
		  "		length-zero-no-unit: true,",
		  "		string-quotes: single,",
		  "		function-whitespace-after: always,",
		  "		function-url-quotes: always,",
		  "		function-comma-space-after: always,",
		  "		font-family-name-quotes: always-where-required,",
		  "		color-hex-length: long,",
		  "		color-hex-case: lower,",
		  "		color-no-invalid-hex: true,",
		  "		selector-max-empty-lines: 0,",
		  "		selector-max-attribute: 3,",
		  "		selector-combinator-blacklist: ['>'],",
		  "		declaration-no-important: true,",
		  "		shorthand-property-no-redundant-values: true,",
		  "		number-max-precision: 2,",
		  "		function-url-no-scheme-relative: true,",
		  "		color-named: never,",
		  "		no-invalid-double-slash-comments: true,",
		  "		no-extra-semicolons: true,",
		  "		no-duplicate-selectors: true,",
		  "		no-duplicate-at-import-rules: true,",
		  "		no-descending-specificity: true,",
		  "		comment-no-empty: true,",
		  "		selector-type-no-unknown: true,",
		  "		selector-pseudo-element-no-unknown: true,",
		  "		selector-pseudo-class-no-unknown: true,",
		  "		block-no-empty: true,",
		  "		declaration-block-no-shorthand-property-overrides: true,",
		  "		declaration-block-no-duplicate-properties: true,",
		  "		property-no-unknown: true,",
		  "		unit-no-unknown: true,",
		  "		string-no-newline: true,",
		  "		function-calc-no-unspaced-operator: true,",
		  "	"
		],
		"description": "stylelint-rules"
	},
	// pa11y
	"pa11y-test": {
		"prefix": [
			"pa11y",
			"basic"
		],
		"body": [
			"const pa11y = require('pa11y')",
			"",
			"const runTest = async () => {",
			"    const results = await Promise.all([",
			"        // Basic pa11y test with no options",
			"        pa11y(`http://localhost:65519`),",
			"    ])",
			"",
			"    // Display Results",
			"    console.log(results)",
			"}",
			"",
			"runTest()"
		],
		"description": "pa11y-test"
	},
	"puppeteer-browser": {
		"prefix": [
			"puppeteer",
			"browser",
			"pa11y"
		],
		"body": [
			"//Define the browser settings at the start of your runTest function",
			"const browser = await puppeteer.launch({",
			"    ignoreHTTPSErrors: true,",
			"    executablePath: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',",
			"    args: ['--no-sandbox'],",
			"})"
		],
		"description": "puppeteer-browser"
	},
	"pa11y-options-browser": {
		"prefix": [
			"puppeteer",
			"pa11y",
			"options",
			"browser"
		],
		"body": [
			"{",
			"    browser: browser",
			"}"
		],
		"description": "pa11y-options-browser"
	},
	"pa11y-save-results": {
		"prefix": [
			"pa11y",
			"save",
			"results"
		],
		"body": [
			"fs.writeFile('tests/results/pa11y.json', JSON.stringify(results), err => {",
		  "	console.log(err)",
			"})"
		],
		"description": "pa11y-save-results"
	}
}