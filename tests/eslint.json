[
	{
		"filePath": "/c/Users/amyka/web/my_testing_blog/_data/contentful.js",
		"messages": [],
		"errorCount": 0,
		"warningCount": 0,
		"fixableErrorCount": 0,
		"fixableWarningCount": 0,
		"output": "require(`dotenv`).config();\r\n\r\nconst contentful = require(`contentful`),\r\n\tshowdown = require(`showdown`);\r\n\r\nconst client = contentful.createClient({\r\n\t\taccessToken: process.env.API_KEY,\r\n\t\tspace: process.env.SPACE_ID,\r\n\t}),\r\n\tconverter = new showdown.Converter(),\r\n\tformat = require(`date-fns/format`);\r\n\r\nmodule.exports = () => new Promise((res, rej) => {\r\n\tclient\r\n\t\t.getEntries({ content_type: `post`, order: `-sys.updatedAt`, limit: 10 })\r\n\t\t.then((data) => {\r\n\t\t\tconst posts = data.items;\r\n\t\t\tposts.forEach((post) => {\r\n\t\t\t\tconst update = post.fields.updatedDate || post.fields.publishDate || post.sys.updatedAt,\r\n\t\t\t\t\tpublish = post.fields.publishDate || post.sys.createdAt;\r\n\r\n\t\t\t\tpost.fields.body = converter.makeHtml(post.fields.body);\r\n\t\t\t\tpost.fields.excerpt = converter.makeHtml(post.fields.body.substr(0, 200));\r\n\t\t\t\tpost.fields.dateUpdate = format(new Date(update), `dd MMM yyyy`);\r\n\t\t\t\tpost.fields.datePublish = format(new Date(publish), `dd MMM yyyy`);\r\n\t\t\t});\r\n\r\n\t\t\tres({ posts, siteUrl: process.env.SITE_URL });\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\trej(err);\r\n\t\t});\r\n});\r\n"
	},
	{
		"filePath": "/c/Users/amyka/web/my_testing_blog/_data/css.js",
		"messages": [
			{
				"ruleId": "no-console",
				"severity": 1,
				"message": "Unexpected console statement.",
				"line": 10,
				"column": 3,
				"nodeType": "MemberExpression",
				"messageId": "unexpected",
				"endLine": 10,
				"endColumn": 14
			}
		],
		"errorCount": 0,
		"warningCount": 1,
		"fixableErrorCount": 0,
		"fixableWarningCount": 0,
		"source": "const sass = require(`node-sass`),\r\n\tpath = require(`path`);\r\n\r\nmodule.exports = () => {\r\n\tconst result = sass.renderSync({\r\n\t\tfile: path.join(__dirname, `../resources/scss/main.scss`),\r\n\t});\r\n\r\n\tif (!result.css) {\r\n\t\tconsole.log(`Error compiling stylesheet`);\r\n\t\treturn `/* Error compiling styleesheet */`;\r\n\t}\r\n\r\n\treturn result.css.toString();\r\n};\r\n"
	},
	{
		"filePath": "/c/Users/amyka/web/my_testing_blog/filters/dates.js",
		"messages": [
			{
				"ruleId": "func-names",
				"severity": 1,
				"message": "Unexpected unnamed function.",
				"line": 4,
				"column": 18,
				"nodeType": "FunctionExpression",
				"messageId": "unnamed",
				"endLine": 4,
				"endColumn": 27
			},
			{
				"ruleId": "no-mixed-spaces-and-tabs",
				"severity": 2,
				"message": "Mixed spaces and tabs.",
				"line": 6,
				"column": 2,
				"nodeType": "Program"
			}
		],
		"errorCount": 1,
		"warningCount": 1,
		"fixableErrorCount": 0,
		"fixableWarningCount": 0,
		"source": "/*\r\n  A date formatter filter for Nunjucks\r\n*/\r\nmodule.exports = function (date) {\r\n\tconst month = [`January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November`, `December`],\r\n\t d = new Date(date);\r\n\treturn `${d.getDate()} ${month[d.getMonth()].substr(0, 3)} ${d.getUTCFullYear()}`;\r\n};\r\n"
	}
]